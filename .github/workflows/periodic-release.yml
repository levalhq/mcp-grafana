name: Periodic Release

on:
  schedule:
    # Run every Monday at 10:00 UTC
    - cron: '0 10 * * 1'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      npm_publish:
        description: 'Publish to npm'
        required: true
        default: true
        type: boolean

permissions:
  contents: write
  packages: write

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
      changes_count: ${{ steps.check.outputs.changes_count }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check for changes since last release
        id: check
        run: |
          # Get the latest release tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -z "$LATEST_TAG" ]; then
            echo "No previous releases found"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "changes_count=999" >> $GITHUB_OUTPUT
          else
            echo "Latest release: $LATEST_TAG"
            
            # Count commits since last release
            CHANGES=$(git rev-list --count $LATEST_TAG..HEAD)
            echo "Changes since $LATEST_TAG: $CHANGES commits"
            
            if [ "$CHANGES" -gt 0 ]; then
              echo "has_changes=true" >> $GITHUB_OUTPUT
              echo "changes_count=$CHANGES" >> $GITHUB_OUTPUT
            else
              echo "has_changes=false" >> $GITHUB_OUTPUT
              echo "changes_count=0" >> $GITHUB_OUTPUT
            fi
          fi
  
  release:
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build package
        run: npm run build
      
      - name: Run tests
        run: npm test || true
      
      - name: Determine release type
        id: release-type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # Analyze commits to determine release type
            # Default to patch for periodic releases
            echo "type=patch" >> $GITHUB_OUTPUT
          fi
      
      - name: Bump version
        id: bump
        run: |
          RELEASE_TYPE="${{ steps.release-type.outputs.type }}"
          echo "Bumping $RELEASE_TYPE version..."
          
          # Bump version
          npm version $RELEASE_TYPE --no-git-tag-version
          
          # Get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Update version in CLI
          sed -i "s/\.version('[^']*')/\.version('$NEW_VERSION')/" src/cli.ts
          
          # Rebuild with new version
          npm run build
      
      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          version-file: './package.json'
          skip-version-file: true
          skip-commit: true
          skip-tag: true
          output-file: 'CHANGELOG.md'
      
      - name: Create npm package
        run: npm pack
      
      - name: Commit version bump
        run: |
          git add package.json package-lock.json src/cli.ts CHANGELOG.md
          git commit -m "chore(release): v${{ steps.bump.outputs.new_version }}

          - ${{ needs.check-changes.outputs.changes_count }} changes since last release
          - Auto-generated by periodic release workflow" || true
      
      - name: Push changes
        run: |
          git push origin main
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          tag_name: v${{ steps.bump.outputs.new_version }}
          name: "Release v${{ steps.bump.outputs.new_version }}"
          body: |
            ## 🎉 Release v${{ steps.bump.outputs.new_version }}
            
            ### 📊 Summary
            - **Changes**: ${{ needs.check-changes.outputs.changes_count }} commits since last release
            - **Release Type**: ${{ steps.release-type.outputs.type }}
            - **Date**: ${{ github.event.repository.updated_at }}
            
            ### 📝 Changelog
            ${{ steps.changelog.outputs.clean_changelog }}
            
            ### 📦 Installation
            ```bash
            # Install globally
            npm install -g @leval/mcp-grafana@${{ steps.bump.outputs.new_version }}
            
            # Or use with npx
            npx @leval/mcp-grafana@${{ steps.bump.outputs.new_version }}
            ```
            
            ### 🚀 Quick Setup
            ```bash
            # For Claude Desktop (macOS/Linux)
            cat > ~/Library/Application\ Support/Claude/claude_desktop_config.json << 'EOF'
            {
              "mcpServers": {
                "grafana": {
                  "command": "npx",
                  "args": ["@leval/mcp-grafana"],
                  "env": {
                    "GRAFANA_URL": "https://your-grafana.com",
                    "GRAFANA_SERVICE_ACCOUNT_TOKEN": "glsa_xxxxxxxxxxxx"
                  }
                }
              }
            }
            EOF
            ```
            
            ### 📚 Documentation
            - [Setup Guide](https://github.com/leval-ai/mcp-grafana#-mcp-client-configuration)
            - [Available Tools](https://github.com/leval-ai/mcp-grafana#-available-tools-43-total)
            - [npm Package](https://www.npmjs.com/package/@leval/mcp-grafana)
          files: |
            leval-mcp-grafana-*.tgz
            CHANGELOG.md
      
      - name: Publish to npm
        if: (github.event_name == 'schedule' || github.event.inputs.npm_publish == 'true')
        run: |
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}